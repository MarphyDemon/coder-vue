vuex
	vuex 一个专门为vue应用程序开发的状态管理模式,集中式存储管理应用的所有组件的状态,以相应的规则保证状态以一种可预测的方式发生变化.
状态自管理应用包含  state views action  组成一个单向数据流
当多个组件共享状态时,单向数据流的简洁性容易破坏:
	1.多个视图依赖于同一状态.
	2.来自不同视图的行为需要变更统一状态.
Vuex可以管理共享状态,但会附带更多的概念及框架.
不开发大型单叶应用,vuex可能会繁琐冗余.构建中大型单叶应用,需要考虑如何更好的在组件外部管理状态,vuex将会成为自然而然的选择.

Vuex应用的核心是store,其中包含着应用中的大部分状态.
Vuex和单纯的全局对象有两点不同:
	1.vuex的状态存储是响应式的.当store中的状态发生变化,相应的vue组件也会得到更新.
	2.不能直接改变store的状态,唯一的改变方法就是通过commit提交mutation.(更好的记录每次状态的改变)
	例:
const store = new Vuex.Store({
  state: {
    count: 0
  },
  mutations: {
    increment (state) {
      state.count++
    }
  }
})

store.commit('increment')
console.log(store.state.count) // -> 1


State
	vuex使用单一状态树,唯一数据源.
mapState  辅助函数
// 在单独构建的版本中辅助函数为 Vuex.mapState
import { mapState } from 'vuex'

export default {
  // ...
  computed: mapState({
    // 箭头函数可使代码更简练
    count: state => state.count,

    // 传字符串参数 'count' 等同于 `state => state.count`
    countAlias: 'count',

    // 为了能够使用 `this` 获取局部状态，必须使用常规函数
    countPlusLocalState (state) {
      return state.count + this.localCount
    }
  })
}
当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。
computed: mapState([
  // 映射 this.count 为 store.state.count
  'count'
])

对象展开运算符
mapState返回的对象与局部对象混合使用:
computed: {
  localComputed () { /* ... */ },
  // 使用对象展开运算符将此对象混入到外部对象中
  ...mapState({
    // ...
  })
}

Getter
    从store中的state派生出一些状态时,多个组件需要用的时,一般需要多次复制这个函数,要不抽取到一个共享函数然后多处导入.
    vuex中允许我们在store中定义getter,相当于store的计算属性.当其依赖的值改变时被重新计算.
    Getter接收state作为第一个参数:
    const store = new Vuex.state({
        state: {
            todos: [
                {id:1, text: "111", done: true},
                {id:2, text: "222", done: false}
            ],
        },
        getters: {
            doneTodos: state => {
                return state.todos.filter(todo => todo.done);
            }
        }
    })

    通过属性访问: 
        store会暴露getters的对象,可以以对象的形式访问这些值: store.getters.doneTodos //[{id:1, text: "111", done: true}]

        Getter也可以接收其他getter作为第二个参数:
            getters:{
                doneTodosCount: (state, getters) => {
                    return getters.doneTodos.length;
                }
            }
            组件中调用doneTodosCount: store.getters.doneTodosCount
    通过方法访问:
        让getter返回一个函数,来实现给getter传参. 在对store的数组进行查询时有用.
        getters: {
            getTodoById: (state) => (id) => {
                return state.store.find(todo => todo.id === id)
            }
        }
        //访问
        store.getters.getTodoById(2)    //  {id:2, text: "222", done: false}

    mapGetters 辅助函数
    mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性：

    import { mapGetters } from 'vuex'

    export default {
        // ...
        computed: {
            // 使用对象展开运算符将 getter 混入 computed 对象中
            ...mapGetters([
            'doneTodosCount',
            'anotherGetter',
            // ...
            ])
        }
    }
    如果你想将一个 getter 属性另取一个名字，使用对象形式：

    mapGetters({
        // 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`
        doneCount: 'doneTodosCount'
    })